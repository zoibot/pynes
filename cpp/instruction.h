#ifndef INSTRUCTION_H
#define INSTRUCTION_H

#include "util.h"

#include <string>
#include <iomanip>

using namespace std;

class Machine;

enum Op { BRK, ORA, ASL, SLO, PHP, ASL_A, NOP, BPL, CLC, JSR, AND, RLA, TSX, 
			  BIT, ROL, PLP, ROL_A, BMI, SEC, RTI, EOR, SRE, PHA, LSR, PLA,
			  LSR_A, JMP, BVC, CLI, RTS, ADC, ROR_A, BVS, RRA, SEI, ROR,
			  STA, SAX, STY, STX, DEY, DEX, TXA, BCC, TYA, TXS, LDY, LDA, 
			  LDX, LAX, TAY, TAX, BCS, CLV, CPY, CPX, CMP, DEC, DCP, INY,
			  INX, BNE, CLD, SBC, ISB, INC, BEQ, SED };
const char opnames[][4] = { "BRK", "ORA", "ASL", "SLO", "PHP", "ASL", "NOP", "BPL", "CLC", 
					"JSR", "AND", "RLA", "TSX", "BIT", "ROL", "PLP", "ROL", "BMI",
					"SEC", "RTI", "EOR", "SRE", "PHA", "LSR", "PLA", "LSR", "JMP",
					"BVC", "CLI", "RTS", "ADC", "ROR", "BVS", "RRA", "SEI", "ROR",
					"STA", "SAX", "STY", "STX", "DEY", "DEX", "TXA", "BCC", "TYA",
					"TXS", "LDY", "LDA", "LDX", "LAX", "TAY", "TAX", "BCS", "CLV",
					"CPY", "CPX", "CMP", "DEC", "DCP", "INY", "INX", "BNE", "CLD",
					"SBC", "ISB", "INC", "BEQ", "SED" };
enum AddrMode { IMP, IMM, ZP, ABS, REL, A, IXID, IDIX, ABSI, ABSY, ABSX, ZPX, ZPY, ZP_ST, ABS_ST};

struct Opcode {
	//byte opcode
	int cycles;
	Op op;
	AddrMode addr_mode;
	bool illegal;
	bool invalid;
	bool store;

	Opcode();
	Opcode(Op op, AddrMode amode, int cycles);
	Opcode(Op op, AddrMode amode, int cycles, bool illegal);
};

struct Instruction {
	Instruction();
    void next_instruction();
    Machine *mach;
	friend ostream& operator <<(ostream &out, Instruction &inst);

    byte opcode;
	Opcode op;
	int extra_cycles;
    byte operand;
	word addr, i_addr;
	byte args[2];
	byte arglen;
};

static const Opcode ops[256] = 
{ 
Opcode(BRK, IMP, 7),
Opcode(ORA, IXID, 6),
Opcode(),
Opcode(SLO, IXID, 1),
Opcode(NOP, ZP, 1),
Opcode(ORA, ZP, 2),
Opcode(ASL, ZP, 5),
Opcode(SLO, ZP, 1),
Opcode(PHP, IMP, 3),
Opcode(ORA, IMM, 2),
Opcode(ASL_A, A, 2),
Opcode(),
Opcode(NOP, ABS, 1),
Opcode(ORA, ABS, 4),
Opcode(ASL, ABS, 6),
Opcode(SLO, ABS, 1),
Opcode(BPL, REL, 2),
Opcode(ORA, IDIX, 5),
Opcode(),
Opcode(SLO, IDIX, 1),
Opcode(NOP, ZPX, 1),
Opcode(ORA, ZPX, 3),
Opcode(ASL, ZPX, 6),
Opcode(SLO, ZPX, 1),
Opcode(CLC, IMP, 2),
Opcode(ORA, ABSY, 4),
Opcode(NOP, IMP, 1),
Opcode(SLO, ABSY, 1),
Opcode(NOP, ABSX, 1),
Opcode(ORA, ABSX, 4),
Opcode(ASL, ABSX, 7),
Opcode(SLO, ABSX, 1),
Opcode(JSR, ABS, 6),
Opcode(AND, IXID, 6),
Opcode(),
Opcode(RLA, IXID, 1),
Opcode(BIT, ZP, 3),
Opcode(AND, ZP, 2),
Opcode(ROL, ZP, 5),
Opcode(RLA, ZP, 1),
Opcode(PLP, IMP, 4),
Opcode(AND, IMM, 2),
Opcode(ROL_A, A, 2),
Opcode(),
Opcode(BIT, ABS, 4),
Opcode(AND, ABS, 4),
Opcode(ROL, ABS, 6),
Opcode(RLA, ABS, 1),
Opcode(BMI, REL, 2),
Opcode(AND, IDIX, 5),
Opcode(),
Opcode(RLA, IDIX, 1),
Opcode(NOP, ZPX, 1),
Opcode(AND, ZPX, 3),
Opcode(ROL, ZPX, 6),
Opcode(RLA, ZPX, 1),
Opcode(SEC, IMP, 2),
Opcode(AND, ABSY, 4),
Opcode(NOP, IMP, 1),
Opcode(RLA, ABSY, 1),
Opcode(NOP, ABSX, 1),
Opcode(AND, ABSX, 4),
Opcode(ROL, ABSX, 7),
Opcode(RLA, ABSX, 1),
Opcode(RTI, IMP, 6),
Opcode(EOR, IXID, 6),
Opcode(),
Opcode(SRE, IXID, 1),
Opcode(NOP, ZP, 1),
Opcode(EOR, ZP, 3),
Opcode(LSR, ZP, 5),
Opcode(SRE, ZP, 1),
Opcode(PHA, IMP, 3),
Opcode(EOR, IMM, 2),
Opcode(LSR_A, A, 2),
Opcode(),
Opcode(JMP, ABS, 3),
Opcode(EOR, ABS, 4),
Opcode(LSR, ABS, 6),
Opcode(SRE, ABS, 1),
Opcode(BVC, REL, 2),
Opcode(EOR, IDIX, 5),
Opcode(),
Opcode(SRE, IDIX, 1),
Opcode(NOP, ZPX, 1),
Opcode(EOR, ZPX, 4),
Opcode(LSR, ZPX, 6),
Opcode(SRE, ZPX, 1),
Opcode(CLI, IMP, 2),
Opcode(EOR, ABSY, 4),
Opcode(NOP, IMP, 1),
Opcode(SRE, ABSY, 1),
Opcode(NOP, ABSX, 1),
Opcode(EOR, ABSX, 4),
Opcode(LSR, ABSX, 7),
Opcode(SRE, ABSX, 1),
Opcode(RTS, IMP, 6),
Opcode(ADC, IXID, 6),
Opcode(),
Opcode(RRA, IXID, 1),
Opcode(NOP, ZP, 1),
Opcode(ADC, ZP, 3),
Opcode(ROR, ZP, 5),
Opcode(RRA, ZP, 1),
Opcode(PLA, IMP, 4),
Opcode(ADC, IMM, 2),
Opcode(ROR_A, A, 2),
Opcode(),
Opcode(JMP, ABSI, 5),
Opcode(ADC, ABS, 4),
Opcode(ROR, ABS, 6),
Opcode(RRA, ABS, 1),
Opcode(BVS, REL, 2),
Opcode(ADC, IDIX, 5),
Opcode(),
Opcode(RRA, IDIX, 1),
Opcode(NOP, ZPX, 1),
Opcode(ADC, ZPX, 4),
Opcode(ROR, ZPX, 6),
Opcode(RRA, ZPX, 1),
Opcode(SEI, IMP, 2),
Opcode(ADC, ABSY, 4),
Opcode(NOP, IMP, 1),
Opcode(RRA, ABSY, 1),
Opcode(NOP, ABSX, 1),
Opcode(ADC, ABSX, 4),
Opcode(ROR, ABSX, 7),
Opcode(RRA, ABSX, 1),
Opcode(NOP, IMM, 1),
Opcode(STA, IXID, 6),
Opcode(),
Opcode(SAX, IXID, 1),
Opcode(STY, ZP_ST, 3),
Opcode(STA, ZP_ST, 3),
Opcode(STX, ZP_ST, 3),
Opcode(SAX, ZP, 1),
Opcode(DEY, IMP, 2),
Opcode(),
Opcode(TXA, IMP, 2),
Opcode(),
Opcode(STY, ABS_ST, 4),
Opcode(STA, ABS_ST, 4),
Opcode(STX, ABS_ST, 4),
Opcode(SAX, ABS, 1),
Opcode(BCC, REL, 2),
Opcode(STA, IDIX, 6),
Opcode(),
Opcode(),
Opcode(STY, ZPX, 4),
Opcode(STA, ZPX, 4),
Opcode(STX, ZPY, 4),
Opcode(SAX, ZPY, 1),
Opcode(TYA, IMP, 2),
Opcode(STA, ABSY, 5),
Opcode(TXS, IMP, 2),
Opcode(),
Opcode(),
Opcode(STA, ABSX, 5),
Opcode(),
Opcode(),
Opcode(LDY, IMM, 2),
Opcode(LDA, IXID, 6),
Opcode(LDX, IMM, 2),
Opcode(LAX, IXID, 1),
Opcode(LDY, ZP, 3),
Opcode(LDA, ZP, 3),
Opcode(LDX, ZP, 3),
Opcode(LAX, ZP, 1),
Opcode(TAY, IMP, 2),
Opcode(LDA, IMM, 2),
Opcode(TAX, IMP, 2),
Opcode(),
Opcode(LDY, ABS, 4),
Opcode(LDA, ABS, 4),
Opcode(LDX, ABS, 4),
Opcode(LAX, ABS, 1),
Opcode(BCS, REL, 2),
Opcode(LDA, IDIX, 5),
Opcode(),
Opcode(LAX, IDIX, 1),
Opcode(LDY, ZPX, 4),
Opcode(LDA, ZPX, 4),
Opcode(LDX, ZPY, 4),
Opcode(LAX, ZPY, 1),
Opcode(CLV, IMP, 2),
Opcode(LDA, ABSY, 4),
Opcode(TSX, IMP, 2),
Opcode(),
Opcode(LDY, ABSX, 4),
Opcode(LDA, ABSX, 4),
Opcode(LDX, ABSY, 4),
Opcode(LAX, ABSY, 1),
Opcode(CPY, IMM, 2),
Opcode(CMP, IXID, 6),
Opcode(),
Opcode(DCP, IXID, 1),
Opcode(CPY, ZP, 3),
Opcode(CMP, ZP, 3),
Opcode(DEC, ZP, 5),
Opcode(DCP, ZP, 1),
Opcode(INY, IMP, 2),
Opcode(CMP, IMM, 2),
Opcode(DEX, IMP, 2),
Opcode(),
Opcode(CPY, ABS, 4),
Opcode(CMP, ABS, 4),
Opcode(DEC, ABS, 6),
Opcode(DCP, ABS, 1),
Opcode(BNE, REL, 2),
Opcode(CMP, IDIX, 5),
Opcode(),
Opcode(DCP, IDIX, 1),
Opcode(NOP, ZPX, 1),
Opcode(CMP, ZPX, 4),
Opcode(DEC, ZPX, 6),
Opcode(DCP, ZPX, 1),
Opcode(CLD, IMP, 2),
Opcode(CMP, ABSY, 4),
Opcode(NOP, IMP, 1),
Opcode(DCP, ABSY, 1),
Opcode(NOP, ABSX, 1),
Opcode(CMP, ABSX, 4),
Opcode(DEC, ABSX, 7),
Opcode(DCP, ABSX, 1),
Opcode(CPX, IMM, 2),
Opcode(SBC, IXID, 6),
Opcode(),
Opcode(ISB, IXID, 1),
Opcode(CPX, ZP, 3),
Opcode(SBC, ZP, 3),
Opcode(INC, ZP, 5),
Opcode(ISB, ZP, 1),
Opcode(INX, IMP, 2),
Opcode(SBC, IMM, 2),
Opcode(NOP, IMP, 2),
Opcode(SBC, IMM, 1),
Opcode(CPX, ABS, 4),
Opcode(SBC, ABS, 4),
Opcode(INC, ABS, 6),
Opcode(ISB, ABS, 1),
Opcode(BEQ, REL, 2),
Opcode(SBC, IDIX, 5),
Opcode(),
Opcode(ISB, IDIX, 1),
Opcode(NOP, ZPX, 1),
Opcode(SBC, ZPX, 4),
Opcode(INC, ZPX, 6),
Opcode(ISB, ZPX, 1),
Opcode(SED, IMP, 2),
Opcode(SBC, ABSY, 4),
Opcode(NOP, IMP, 1),
Opcode(ISB, ABSY, 1),
Opcode(NOP, ABSX, 1),
Opcode(SBC, ABSX, 4),
Opcode(INC, ABSX, 7),
Opcode(ISB, ABSX, 7),
};

#endif //INSTRUCTION_H
